#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 382)

def initialize(query_string, filename:, tracer: Tracing::NullTracer)
  @query_string = query_string
  @filename = filename
  @tracer = tracer
end

def parse_document
  @document ||= begin
    # Break the string into tokens
    @tracer.trace("lex", {query_string: @query_string}) do
      @tokens ||= GraphQL.scan(@query_string)
    end
    # From the tokens, build an AST
    @tracer.trace("parse", {query_string: @query_string}) do
      if @tokens.none?
        make_node(:Document, definitions: [], filename: @filename)
      else
        do_parse
      end
    end
  end
end

def self.parse(query_string, filename: nil, tracer: GraphQL::Tracing::NullTracer)
  self.new(query_string, filename: filename, tracer: tracer).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$" || lexer_token == nil
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string, filename: @filename)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string, filename: @filename)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  assigns[:filename] = @filename

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -129,    54,    10,    11,    12,    78,   137,   137,    77,   227,
   227,   233,   137,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    74,    10,    11,
    12,  -129,    60,  -129,    81,   137,   137,   137,   187,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,   188,    10,    11,    12,    81,    60,    81,
   115,    10,    11,    12,    32,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   127,    99,    60,    10,    11,    12,    63,    65,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,   184,    70,    10,    11,    12,    71,
   144,   182,    73,    85,   183,   211,    81,   155,    38,    39,
    40,    41,    42,    43,    44,    45,    46,   153,   154,   172,
   173,   169,   170,   171,   181,   184,    81,    10,    11,    12,
    81,    81,   182,    81,    81,   183,    99,    81,   155,    38,
    39,    40,    41,    42,    43,    44,    45,    46,   153,   154,
   172,   173,   169,   170,   171,   181,   242,    81,    10,    11,
    12,    81,   112,   117,   119,   120,   183,   121,   122,   155,
    38,    39,    40,    41,    42,    43,    44,    45,    46,   153,
   154,   172,   173,   169,   170,   171,   181,   184,   123,    10,
    11,    12,   124,   112,   182,   112,    78,   183,   228,   135,
   155,    38,    39,    40,    41,    42,    43,    44,    45,    46,
   153,   154,   172,   173,   169,   170,   171,   181,   184,    78,
    10,    11,    12,    81,   165,   182,   166,    81,   183,   112,
   112,   155,    38,    39,    40,    41,    42,    43,    44,    45,
    46,   153,   154,   172,   173,   169,   170,   171,   181,   242,
   190,    10,    11,    12,   193,   124,   198,    81,   202,   183,
   112,   193,   155,    38,    39,    40,    41,    42,    43,    44,
    45,    46,   153,   154,   172,   173,   169,   170,   171,   181,
   184,   222,    10,    11,    12,   225,   243,   182,   246,    81,
   183,   nil,   nil,   155,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   153,   154,   172,   173,   169,   170,   171,
   181,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,     9,   nil,    10,    11,
    12,    60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,    24,   nil,   nil,    27,    28,    29,    30,    31,     9,
    13,    10,    11,    12,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,    24,  -122,   nil,    27,    28,    29,
    30,    31,   nil,    13,    10,    11,    12,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,    83,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,   197,
    10,    11,    12,    81,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,   204,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,   234,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,   214,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,   249,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,   237,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,   230,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   205,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   133,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   102,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,   201,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   155,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   153,   154,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,    38,    39,    40,
    41,    42,    43,    44,    45,    46,   153,   154 ]

racc_action_check = [
   147,     9,     9,     9,     9,    59,   224,   208,    59,   224,
   208,   217,   238,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,    53,    53,    53,
    53,   147,     9,   147,   238,   114,   139,   110,   139,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,   140,   140,   140,   140,   114,    53,   110,
    86,    86,    86,    86,     1,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   119,
   119,   119,    97,    97,   140,    63,    63,    63,    17,    26,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   183,    31,   183,   183,   183,    32,
   119,   183,    34,    61,   183,   183,    64,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   135,    66,   135,   135,   135,
    67,    68,   135,    69,    72,   135,    73,    76,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   246,    79,   246,   246,
   246,    82,    84,    88,    90,    91,   246,    92,    93,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   212,    94,   212,
   212,   212,    95,    96,   212,   100,   101,   212,   212,   105,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   243,   107,
   243,   243,   243,   118,   125,   243,   129,   132,   243,   138,
   141,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   227,
   143,   227,   227,   227,   145,   148,   152,   158,   161,   227,
   167,   191,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   233,   195,   233,   233,   233,   206,   232,   233,   236,   239,
   233,   nil,   nil,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   112,   112,   112,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,     0,   nil,     0,     0,
     0,   112,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     0,     0,   nil,   nil,     0,     0,     0,     0,     0,     3,
     0,     3,     3,     3,   nil,     0,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,     3,     3,   nil,     3,     3,     3,
     3,     3,   nil,     3,    60,    60,    60,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,    60,    60,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,   150,
   150,   150,   150,    60,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   163,   163,   163,   163,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   218,   218,   218,   218,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   184,   184,   184,
   184,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   242,   242,   242,   242,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   220,
   220,   220,   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   215,   215,   215,   215,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,    77,    77,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    83,    83,    83,   nil,
   nil,   nil,   nil,   nil,    83,   nil,   nil,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,   144,   144,   144,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,    85,    85,    85,   nil,
   nil,   nil,   nil,   nil,    85,   nil,   nil,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,   146,   146,   146,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,    24,    24,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,    24,    24,
    24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
    24,     8,     8,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,   164,   164,   164,   nil,
   164,   nil,   nil,   nil,   nil,   nil,   nil,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   165,   165,   165,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   166,   166,   166,   nil,
   nil,   nil,   nil,   nil,   166,   nil,   nil,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,    65,    65,    65,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,   182,   182,   182,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   190,   190,   190,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,    27,    27,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,   193,   193,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,    28,    28,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,   198,   198,   198,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   202,   202,   202,   nil,
   nil,   nil,   nil,   nil,   202,   nil,   nil,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,    29,    29,    29,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    29,    29,   222,   222,   222,   nil,
   nil,   nil,   nil,   nil,   222,   nil,   nil,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   225,   225,   225,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,    30,    30,    30,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    99,    99,    99,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    70,    70,    70,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,   103,   103,   103,   nil,   103,   nil,   nil,   nil,   nil,
   nil,   nil,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,    13,    13,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,   111,   111,   111,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   117,   117,   117,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,    81,    81,    81,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,   120,   120,   120,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   121,   121,   121,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   123,   123,   123,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   124,   124,   124,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,    78,    78,    78,   nil,
    78,   nil,   nil,   nil,   nil,   nil,   nil,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,   160,   160,   160,   160,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   122,   122,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122 ]

racc_action_pointer = [
   344,    64,   nil,   367,   nil,   nil,   nil,   nil,   747,    -2,
   nil,   nil,   nil,  1222,   nil,   nil,   nil,    86,   nil,   nil,
   nil,   nil,   nil,   nil,   722,   nil,    71,   922,   972,  1047,
  1122,    72,   109,   nil,   105,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,    -2,
   390,    98,   nil,    81,    83,   847,   103,   107,   108,   110,
  1172,   nil,   111,   137,   nil,   nil,   114,   597,  1422,   134,
   nil,  1297,   138,   622,   170,   672,    57,   nil,   163,   nil,
   155,   173,   163,   176,   196,   195,   201,    74,   nil,  1147,
   203,   199,   nil,  1197,   nil,   199,   nil,   222,   nil,   nil,
    26,  1247,   317,   nil,    24,   nil,   nil,  1272,   200,    75,
  1322,  1347,  1471,  1372,  1397,   219,   nil,   nil,   nil,   226,
   nil,   nil,   204,   nil,   nil,   133,   nil,   nil,   237,    25,
    50,   238,   nil,   258,   647,   229,   697,    -2,   258,   nil,
   416,   nil,   230,   nil,   nil,   nil,   nil,   nil,   234,   nil,
  1448,   258,   nil,   442,   772,   797,   822,   268,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   872,   102,   494,   nil,   nil,   nil,   nil,   nil,
   897,   236,   nil,   947,   nil,   281,   nil,   nil,   997,   nil,
   nil,   nil,  1022,   nil,   nil,   nil,   259,   nil,    -4,   nil,
   nil,   nil,   195,   nil,   nil,   572,   nil,     1,   468,   nil,
   546,   nil,  1072,   nil,    -5,  1097,   nil,   257,   nil,   nil,
   nil,   nil,   286,   288,   nil,   nil,   288,   nil,     1,   266,
   nil,   nil,   520,   226,   nil,   nil,   164,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -122,  -151,    -1,    -2,    -3,    -5,    -6,    -7,   -14,  -151,
   -11,   -12,   -13,  -106,  -108,  -109,  -110,  -151,  -115,  -116,
  -117,  -118,  -119,  -120,  -151,  -123,  -151,  -151,  -151,  -151,
  -151,  -151,  -151,    -4,   -16,   -15,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,  -151,   -10,   -29,   -31,   -32,   -33,   -61,
   -97,  -151,  -107,  -151,   -97,  -151,   -97,   -97,   -97,   -97,
  -151,   251,   -97,  -151,    -9,   -30,   -97,  -151,  -151,   -98,
   -99,  -151,   -97,  -151,  -151,  -151,  -151,  -112,  -151,  -121,
  -125,  -151,  -151,  -151,  -151,  -136,  -151,  -151,   -18,  -151,
   -27,   -61,   -62,  -151,   -64,  -151,  -100,   -61,  -102,   -21,
   -97,  -151,  -151,  -104,   -97,  -111,  -113,  -151,   -97,  -151,
  -139,  -151,  -151,  -151,  -151,  -151,    -8,   -17,   -19,  -151,
   -28,   -34,   -97,   -63,   -65,   -76,  -101,   -22,  -151,  -151,
  -151,  -151,  -114,  -151,  -151,  -127,  -128,  -131,  -136,  -140,
  -151,  -143,  -145,   -53,   -54,   -55,   -56,   -57,   -97,   -59,
  -151,  -151,  -134,  -151,  -151,  -151,  -151,   -27,   -66,   -67,
   -68,   -69,   -70,   -71,   -72,   -73,   -74,   -75,   -77,   -78,
   -79,   -80,  -151,  -151,  -151,   -96,  -103,   -23,   -26,  -105,
  -139,  -126,  -129,  -151,  -132,  -151,  -141,  -142,  -151,   -58,
   -60,  -146,  -151,  -135,  -147,  -137,  -148,  -149,   -24,   -35,
   -81,   -82,  -151,   -84,   -86,  -151,   -88,  -151,  -151,   -93,
  -151,  -130,  -151,  -144,   -24,  -151,   -20,  -151,   -83,   -85,
   -87,   -89,  -151,   -76,   -92,   -94,  -151,  -124,   -97,   -97,
  -150,   -25,  -151,   -76,   -77,   -90,  -151,  -138,  -133,   -91,
   -95 ]

racc_goto_table = [
     8,    53,    75,     8,   196,   131,   168,    76,    35,    59,
    84,    62,    87,   110,    89,   114,    91,    92,    93,    94,
   150,   158,    96,   125,    64,   216,   100,    66,    67,    68,
    69,   113,   108,   159,   103,   116,   104,   157,    98,   203,
   203,   139,   145,   126,     4,   163,   164,    33,   215,   132,
   157,   160,   235,    59,   213,   136,   231,   106,    82,   158,
   138,   134,   128,    88,   141,    90,    61,   191,   143,    86,
    95,   200,   209,   241,   196,   157,   195,   101,   105,   244,
    97,   107,   167,   229,   226,   186,    88,   118,   189,    75,
   220,    72,   250,    34,   146,     1,   208,   206,   157,   129,
   239,     3,     2,   105,   140,   152,   212,   nil,   199,   nil,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   142,   nil,   147,
   148,   151,   156,   161,   161,   nil,   nil,   157,   nil,   nil,
   nil,   nil,   224,   nil,   nil,   156,   nil,   nil,   nil,   nil,
    59,   nil,   157,   nil,   192,   nil,   194,   nil,   157,   nil,
   148,   nil,   238,   nil,   nil,   nil,   nil,   nil,   157,   nil,
   156,   157,   nil,   161,   161,   207,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   210,   156,   217,   nil,   nil,   nil,   247,   248,
   148,   nil,   nil,   221,   nil,   nil,   nil,   nil,   223,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   156,   nil,   nil,   232,   nil,   nil,   236,   nil,
   148,   nil,   nil,   nil,   nil,   240,   nil,   156,   nil,   nil,
   nil,   nil,   nil,   156,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   236,   156,   nil,   nil,   156 ]

racc_goto_check = [
     8,    13,    21,     8,    67,    20,    33,    25,    14,    14,
    11,    26,    52,    17,    11,    17,    11,    11,    11,    11,
    61,    28,    11,    66,    14,    42,    11,    14,    14,    14,
    14,    12,    11,    29,    31,    52,    32,    27,    16,    64,
    64,    17,    62,    12,     4,    65,    65,     4,    41,    25,
    27,    30,    44,    14,    33,    25,    42,    46,    26,    28,
    11,    32,    16,     8,    11,    14,    47,    62,    11,    51,
    14,    29,    20,    19,    67,    27,    66,    14,    14,    19,
    15,    14,    11,    33,    18,    12,     8,    60,    12,    21,
    61,    10,    19,     9,    63,     1,    17,    69,    27,    14,
    18,     3,     2,    14,    13,    68,    40,   nil,    11,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil,    14,   nil,    14,
    14,    14,     8,    14,    14,   nil,   nil,    27,   nil,   nil,
   nil,   nil,    17,   nil,   nil,     8,   nil,   nil,   nil,   nil,
    14,   nil,    27,   nil,    14,   nil,    14,   nil,    27,   nil,
    14,   nil,    17,   nil,   nil,   nil,   nil,   nil,    27,   nil,
     8,    27,   nil,    14,    14,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    14,     8,    14,   nil,   nil,   nil,    11,    11,
    14,   nil,   nil,    14,   nil,   nil,   nil,   nil,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,    14,   nil,   nil,    14,   nil,
    14,   nil,   nil,   nil,   nil,    14,   nil,     8,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    14,     8,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,    95,   102,   101,    44,   nil,   nil,   nil,     0,    85,
    57,   -50,   -53,    -8,     0,     7,   -35,   -70,  -124,  -154,
   -95,   -51,   nil,   nil,   nil,   -52,    -2,   -85,  -101,   -89,
   -71,   -44,   -42,  -129,   nil,   nil,   nil,   nil,   nil,   nil,
   -77,  -136,  -159,   nil,  -166,   nil,   -22,    53,   nil,   nil,
   nil,     6,   -51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    -3,  -100,   -77,   -25,  -124,   -78,   -72,  -146,   -16,   -68 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,    51,   nil,
   nil,   nil,   130,   nil,   109,   nil,   nil,   nil,   nil,   178,
   nil,    55,    56,    57,    58,   nil,    36,    52,   185,   nil,
   nil,   nil,   nil,   245,   174,   175,   176,   177,   179,   180,
   nil,   nil,   nil,   218,   219,    79,    80,   nil,    14,    15,
    16,   nil,   nil,    18,    19,    20,    21,    22,    23,    26,
   nil,   nil,   nil,   nil,   162,   nil,   nil,   149,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 39, :_reduce_2,
  1, 40, :_reduce_3,
  2, 40, :_reduce_4,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  5, 42, :_reduce_8,
  3, 42, :_reduce_9,
  2, 42, :_reduce_10,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  0, 46, :_reduce_14,
  1, 46, :_reduce_none,
  0, 47, :_reduce_16,
  3, 47, :_reduce_17,
  1, 52, :_reduce_18,
  2, 52, :_reduce_19,
  5, 53, :_reduce_20,
  1, 54, :_reduce_21,
  2, 54, :_reduce_22,
  3, 54, :_reduce_23,
  0, 55, :_reduce_24,
  2, 55, :_reduce_25,
  3, 49, :_reduce_26,
  0, 57, :_reduce_27,
  1, 57, :_reduce_28,
  1, 50, :_reduce_29,
  2, 50, :_reduce_30,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  4, 59, :_reduce_34,
  6, 59, :_reduce_35,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  2, 66, :_reduce_58,
  1, 67, :_reduce_59,
  2, 67, :_reduce_60,
  0, 62, :_reduce_61,
  2, 62, :_reduce_62,
  3, 62, :_reduce_63,
  1, 68, :_reduce_64,
  2, 68, :_reduce_65,
  3, 69, :_reduce_66,
  1, 56, :_reduce_67,
  1, 56, :_reduce_68,
  1, 56, :_reduce_69,
  1, 56, :_reduce_70,
  1, 56, :_reduce_71,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  0, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_80,
  2, 75, :_reduce_81,
  2, 73, :_reduce_82,
  3, 73, :_reduce_83,
  1, 77, :_reduce_84,
  2, 77, :_reduce_85,
  2, 76, :_reduce_86,
  3, 76, :_reduce_87,
  1, 78, :_reduce_88,
  2, 78, :_reduce_89,
  3, 79, :_reduce_90,
  2, 74, :_reduce_91,
  3, 74, :_reduce_92,
  1, 80, :_reduce_93,
  2, 80, :_reduce_94,
  3, 81, :_reduce_95,
  1, 72, :_reduce_96,
  0, 48, :_reduce_97,
  1, 48, :_reduce_none,
  1, 82, :_reduce_99,
  2, 82, :_reduce_100,
  3, 83, :_reduce_101,
  3, 60, :_reduce_102,
  5, 61, :_reduce_103,
  3, 61, :_reduce_104,
  6, 43, :_reduce_105,
  0, 84, :_reduce_106,
  1, 84, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  4, 85, :_reduce_111,
  1, 88, :_reduce_none,
  2, 88, :_reduce_113,
  3, 89, :_reduce_114,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  3, 90, :_reduce_121,
  0, 96, :_reduce_none,
  1, 96, :_reduce_none,
  8, 91, :_reduce_124,
  0, 97, :_reduce_125,
  3, 97, :_reduce_126,
  2, 97, :_reduce_127,
  2, 97, :_reduce_128,
  1, 99, :_reduce_129,
  3, 99, :_reduce_130,
  1, 100, :_reduce_131,
  2, 100, :_reduce_132,
  5, 101, :_reduce_133,
  1, 102, :_reduce_134,
  2, 102, :_reduce_135,
  0, 103, :_reduce_136,
  3, 103, :_reduce_137,
  5, 104, :_reduce_138,
  0, 98, :_reduce_139,
  1, 98, :_reduce_140,
  2, 98, :_reduce_141,
  6, 92, :_reduce_142,
  1, 105, :_reduce_143,
  3, 105, :_reduce_144,
  5, 93, :_reduce_145,
  6, 94, :_reduce_146,
  6, 95, :_reduce_147,
  6, 87, :_reduce_148,
  1, 106, :_reduce_149,
  3, 106, :_reduce_150 ]

racc_reduce_n = 151

racc_shift_n = 251

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :NULL => 32,
  :DIR_SIGN => 33,
  :ELLIPSIS => 34,
  :AMP => 35,
  :PIPE => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "AMP",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "operation_definition",
  "fragment_definition",
  "type_system_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "literal_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "input_value",
  "null_value",
  "enum_value",
  "list_value",
  "object_literal_value",
  "variable",
  "object_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "object_literal_value_list",
  "object_literal_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "type_definition_opt",
  "implements_opt",
  "field_definition_list",
  "interfaces_list",
  "legacy_interfaces_list",
  "input_value_definition",
  "input_value_definition_list",
  "arguments_definitions_opt",
  "field_definition",
  "union_members",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_8(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_9(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_10(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_14(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_17(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_20(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_21(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_22(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_23(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_25(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_27(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_29(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_30(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_34(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_35(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_58(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_59(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_60(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_61(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_62(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_63(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_64(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_65(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_66(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_67(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_68(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_69(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_70(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_71(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_80(val, _values, result)
     return make_node(:NullValue, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_81(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_82(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_83(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_84(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_85(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_86(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_87(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_88(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_89(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_90(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_91(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_92(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_93(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_94(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_95(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_96(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_97(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_99(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_100(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_101(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_102(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_103(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_104(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_105(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_106(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_111(val, _values, result)
     return make_node(:SchemaDefinition, position_source: val[0], **val[2]) 
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_113(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_114(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_121(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2], description: get_description(val[0]), position_source: val[0]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_124(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[6], description: val[0] || get_description(val[1]), position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_125(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_126(val, _values, result)
     return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 309)
  def _reduce_127(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_128(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_129(val, _values, result)
     return [make_node(:TypeName, name: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_130(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_131(val, _values, result)
     return [make_node(:TypeName, name: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_132(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_133(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_134(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_135(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_136(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_137(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_138(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_139(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_140(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_141(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_142(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 349)
  def _reduce_143(val, _values, result)
     return [make_node(:TypeName, name: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_144(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_145(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_146(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_147(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_148(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_149(val, _values, result)
     return [val[0].to_s] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_150(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
